{
    "docs": [
        {
            "location": "/",
            "text": "ozp-backend\n\n\nDjango-based backend API for the OZONE Platform (OZP). For those who just want\nto get OZP (Center, HUD, Webtop, IWC) up and running, see the\n\nquickstart\n of the \nozp-ansible\n project.\n\n\nBackground\n\n\nozp-backend replaces \nozp-rest\n\nas the backend for Center, HUD, Webtop, and IWC. Notable differences include:\n\n Python vs. Java/Groovy\n\n Django, Django Rest Framework vs. Grails, JAX-RS\n* Postgres vs. MySQL\n\n\n3rd Party Services\n\n\nTravis-CI\n\n\n\nGetting Started\n\n\nThe recommended approach is to use the vagrant box referenced at the beginning\nof this README, which will create a production-esque deployment of OZP:\n\n\n\n\nPostgres (vs. SQLite)\n\n\nPKI (vs. HTTP Basic Auth)\n\n\nUse of external authorization service\n\n\nEnable HTTPS (via nginx reverse proxy)\n\n\nServed via Gunicorn (vs. Django development server)\n\n\n\n\nTo serve the application on your host machine with minimal external dependencies,\ndo the following:\n\n\n\n\nRemove psycopg2 from requirements.txt (so that Postgres won't be required)\n\n\nEnable HTTP Basic Auth and disable PKI authentication. In settings.py,\n\nREST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES\n should be set to\n\n'rest_framework.authentication.BasicAuthentication'\n\n\nDisable the authorization service. In settings.py, set \nOZP.USE_AUTH_SERVER\n\nto \nFalse\n\n\nIn settings.py, set \nOZP.DEMO_APP_ROOT\n to \nlocalhost:8000\n (or wherever\nthe django app will be served at)\n\n\n\n\nThen, do the following:\n\n\n\n\nInstall Python 3.4.3. Python can be installed by downloading the appropriate\n    files \nhere\n. Note\n    that Python 3.4 includes both \npip\n and \nvenv\n, a built-in replacement\n    for the \nvirtualenv\n package\n\n\nCreate a new python environment using python 3.4.x. First, create a new\n    directory where this environment will live, for example, in\n    \n~/python_envs/ozp\n. Now create a new environment there:\n    \npython3.4 -m venv ENV\n (where \nENV\n is the path you used above)\n\n\nActive the new environment: \nsource ENV/bin/activate\n\n\nInstall the necessary dependencies into this python environment:\n    \npip install -r requirements.txt\n\n\nRun the server: \nmake dev\n\n\n\n\nSwagger documentation for the api is available at \nhttp://localhost:8000/docs/\n\nUse username \nwsmith\n password \npassword\n when prompted for authentication info\n\n\nThere's also the admin interface at \nhttp://localhost:8000/admin\n\n(username: \nwsmith\n, password: \npassword\n)\n\n\nRuning Elasticsearch for Search\n\n\nozp/Settings.py file variable needs to be updated  \n\nES_ENABLED = True  \n\nAfter installing Elasticsearch run \nmake reindex_es\n in the ozp-backend folder while inside of your $env     \n\n\nInstalling and Running Elasticsearch\n   \n\nElasticsearch 2.4.1 needs to be installed and run\nhttps://www.elastic.co/guide/en/elasticsearch/guide/current/running-elasticsearch.html\n\n\nThe only requirement for installing Elasticsearch is a recent version of Java. Preferably, you should install the latest version of the official Java from www.java.com.    \n\n\nYou can get the Elasticsearch 2.4.1 from https://www.elastic.co/blog/elasticsearch-2-4-1-released.  \n\nTo install Elasticsearch, download and extract the archive file for your platform. For more information, see the Installation topic in the Elasticsearch Reference.\n\n\nTip\n  \n\nWhen installing Elasticsearch in production, you can choose to use the Debian or RPM packages provided on the downloads page. You can also use the officially supported Puppet module or Chef cookbook.  \n\nOnce you\u2019ve extracted the archive file, Elasticsearch is ready to run. To start it up in the foreground:  \n\ncd elasticsearch  \n\n./bin/elasticsearch    \n\n\nReleasing\n\n\nRun \npython release.py\n to generate a tarball with Wheels for the application\nand all of its dependencies. See \nrelease.py\n for details\n\n\nFor Developers\n\n\nUnderstanding this project requires knowing a small-medium amount of Django and\na large amount of Django Rest Framework (DRF). From Django itself:\n\n Object-relational mapper (ORM)\n\n Authentication\n\n \nmanage.py\n utility (testing, database migration)\n\n Logging\n* Settings\n\n\nMost of the URLs and Views are done with DRF, and very little is done with\ntemplating, forms, and the admin site\n\n\nPlugins\n\n\nTODO Add documentation\n\n How does it work\n\n How do make a new plugin\n\n\nPep8\n\n\nPep8 is the Style Guide for Python Code\n\n\npep8 ozp ozpcenter ozpiwc plugins plugins_util --ignore=E501,E123,E128,E121,E124,E711,E402 --exclude=ozpcenter/scripts/* --show-source\nautopep8 . -r --diff --ignore errors=E501,E123,E128,E121,E124  --max-line-length=5000\n\n\n\n\nSerializers\n\n\nSerialization = Python obj -\n JSON\n\n\nDeserialization = JSON -\n Python obj\n\n\nDRF does not have a built-in, defacto way of specifying different serializers\nfor handling input on a request vs output on a Response. Sometimes this is\nacceptable, but often times the two structures are not the same. For instance,\nsome fields may be auto-generated on the server when a \nPOST\n is made (so they\nshouldn't be part of the \nPOST\n Request data that will be deserialized), but a\n\nGET\n request should return a Response that includes this information. For\nsimple cases like this, Serializer fields can be marked as \nread_only\n or\n\nwrite_only\n (\nread_only\n fields will not become part of the serializer's\n\nvalidated_data\n). If more control than this is needed (e.g. very different input\nand output formats), the \nget_serializer_class()\n method can be overridden\nin the View and selected dynamically based on request.method (\nPOST\n, \nGET\n,\netc).\n\n\nFor details regarding input vs output serializers:\n\n https://github.com/tomchristie/django-rest-framework/issues/1563\n\n http://stackoverflow.com/questions/17551380/python-rest-framwork-different-serializers-for-input-and-output-of-service\n\n\nSometimes it might not be clear where the Serializer classes should live for\nnested objects. For example, the listing resource needs to serialize the nested\nAgency model - should that Agency serializer live in the listing resource\npackage or in the agency package? Generally speaking, if the serializer is\nvery generic, it should live in its respective resource package. If instead\nit's highly customized (and thus unlikely to be used by other resources), it\nshould live with its nested resource.\n\n\nOne annoyance with nested serializers is that, if doing a create/POST, DRF\nassumes that each nested resource should also be created. This causes validation\nerrors to be raised when doing things like creating a new listing with an\nexisting category, listing type, etc. The way around that problem is to\nexplicitly remove all validation on any nested serializer fields that have\nunique constraints. For example, for a serializer with a \ntitle\n field:\n\n\nextra_kwargs = {\n    'title': {'validators': []}\n}\n\n\n\n\nBecause we don't want to remove the validator for the base resource (only when\nit's used in a nested fashion), some of the more complicated resources (namely\nListing) have lots of nested serializers that are identical to their non-nested\ncounterparts save for the removal of the unique field validators\n\n\nModel Access and Caching\n\n\nmodel_access.py\n files should be used to encapsulate more complex database\nqueries and business logic (as opposed to placing it in Views and Serializers).\nThese methods are easier to use in sample data generators, easier to test,\nand allows the complexity of Django Rest Framework to stay largely separate\nfrom the core application logic\n\n\nMemcache is not currently used, but this is also the layer to implement\nobject/query caching, such as:\n\n\ndata = cache.get('stuff')\nif data is None:\n    data = list(Stuff.objects.all())\n    cache.set('stuff', data)\nreturn data\n\n\n\n\nNote that we also need logic to invalidate specific caches when resources are\nmodified. For example, if a Listing is updated, all cached items referring/using\nthat listing's data should be invalidated. By far and large, this logic is not\nyet in place, so enabling the cache will likely lead to unexpected results.\nIn addition, the requirement to support 'tailored views' reduces the value\nof caching, since most queries must be filtered against a user's particular\naccess controls\n\n\nModels\n\n\nRegarding \n__str__()\n:\nIt\u2019s important to add \n__str__()\n methods to your models, not only for your own\nconvenience when dealing with the interactive prompt, but also because objects\u2019\nrepresentations are used throughout Django\u2019s automatically-generated admin.\nNote that on Python 2, \n__unicode__()\n should be defined instead.\n\n\nBy default, fields cannot be null or blank\n\n\nSome of the access control logic necessary to support tailored views lives\nin \nmodels.py\n as custom \nmodels.Manager\n classes (Reviews, Listings,\nListingActivities, and Images)\n\n\nViews\n\n\nWe generally prefer to\nuse class-based views and \nViewSet\ns (\nModelViewSet\ns in particular) just\nbecause it's less code (assuming you don't require a significant amount of\ncustomization)\n\n\nThe use of the convenience method \nget_object_or_404\n breaks the encapsulation\nof database queries in the \nmodel_access\n files (and prevents caching). That\nmight be something to look at later on.\n\n\nURLs\n\n\nAll resource endpoints are defined in the resource's respective \nurls.py\n in\n\nozpcenter/api/\n. \nozpcenter.urls\n collects all of these endpoints, where they\nare given the \napi/\n prefix in the global \nurls.py\n\n\nDRF uses a browsable API, meaning that you can go to\n\nlocalhost:8000/api/metadata/\n (for instance) in your browser. In general, the\nSwagger documentation is the recommended way to view and interact with the API.\n\n\nAll URLs are currently set to use a trailing \n/\n\n\nAuthentication and Authorization\n\n\nOverview\n\n\nAuthentication and authorization is based on the default \ndjango.contrib.auth\n\nsystem built into Django, with numerous customizations.\n\n\nThe default User model is extended by giving the \nProfile\n model a one-to-one\nrelationship with the \ndjango.contrib.auth.models.User\n model, as described\n\nhere\n\n\nThe default \nUser\n\nmodel has the following fields:\n\n\n\n\nusername\n\n\nfirst_name\n\n\nlast_name\n\n\nemail\n\n\npassword\n\n\ngroups (many-to-many relationship to Group)\n\n\nuser_permissions (many-to-many relationship to Permission)\n\n\nis_staff (Boolean. Designates whether this user can access the admin site)\n\n\nis_active (Boolean. Designates whether this user account should be considered\n    active)\n\n\nis_superuser (Boolean. Designates that this user has all permissions without\n    explicitly assigning them)\n\n\nlast_login (a datetime of the user's last login)\n\n\ndate_joined (a datetime designating when the account was created)\n\n\n\n\nOf these fields:\n\n\n\n\nfirst_name and last_name are not used\n\n\nis_superuser is always set to False\n\n\nis_staff is set to True for Org Stewards and Apps Mall Stewards\n\n\npassword is only used in development. On production, client SSL certs are\n    used, and so password is set to XXXXXXXX\n\n\n\n\nGroups\n are\nused to categorize users as Users, Org Stewards, Apps Mall Stewards, etc. These\ngroups are used to partially control access to various resources (for example,\nUsers cannot make modifications to the Categories). That said, the majority\nof 'access control' cannot be accomplished by creating generic permissions\nand groups. For example, an Org Steward should be able to approve a Listing only\nfor organizations to which they belong. Furthermore, any resources (Listings,\nImages) that have a specific access_control associated with them must be\nhidden from users (regardless of role/group) without the appropriate level\nof access.\n\n\nDjango Permissions are used to control access to the Admin site. By default,\nadd, change, and delete permissions are added to each model in the application.\nThe notion of separate permissions for these three operations don't make much\nsense for this application - for now, the default permissions will be left\nalone, but the Permissions infrastructure won't be used much beyond that. As\npreviously stated, it is not possible to create generic permissions that can\nbe statically assigned to users, like 'can_approve_listing', since the\nallowance of such an action depends on the object (model instance), not just the\nmodel type. Therefore, custom object-level permissions will typically be used\nto control access to specific resource instances (for both read and write\noperations). For list queries where multiple resources are returned, these\nobject-level permission checks are not used. Instead, filters and custom\nquerysets are used to ensure only the appropriate data is returned.\n\n\nAuthentication\n\n\nThe app currently supports two forms of authentication - HTTP Basic Auth and\nPKI (client SSL authentication). HTTP Basic Auth is used for development\npurposes only. PKI authentication is implemented in \nozpcenter/auth/pkiauth.py\n.\nThe method of authentication to use is controlled by\n\nREST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES\n in settings.py\n\n\nTests\n\n\nGenerally speaking, each resource (listing, agency, profile, etc) may have\ntwo types of tests: business logic tests and API tests. The former typically\ntests code in \nmodel_access.py\n files, which is pure Python code and independent\nof Django or any \"web stuff\". The latter API tests, on the other hand, actually\nmake HTTP requests using special testing clients and factories, and are more\nlike end-to-end or integration tests\n\n\nDatabase\n\n\nSystem uses Postgres in Production and Sqlite3 in Development\n\n\nAPI Documentation\n\n\nThere are a number of different documentation resources available, depending\non what you're looking for.\n\n\nDRF's Web Browsable API can be accessed by entering an endpoint in the browser,\nfor example, \nrootUrl\n/api/profile/\n.  Limitations:\n * the API Root doesn't have a list of all endpoints, so you need to know\n what you're looking for\n * although these pages include forms that could potentially support POST\n requests, they don't work very well, making the browsable API mostly useless\n for non-GET requests\n\n\nSwagger docs are created via Django REST Swagger and served at\n \nrootUrl\n/docs/\n. Swagger makes it easy to see all of the endpoints available.\n Unlike the Browsable API docs, Swagger supports POST, PUT, and DELETE for most\n of the endpoints as well. Limitations:\n  * POST api/image/ doesn't work from Swagger\n  * some of the more complicated endpoints (like POST api/listing/) might not\n  have forms that show all of the required and/or optional data that must or\n  could be included in the request\n\n\nPostman was used extensively during the API's development, and perhaps someday\n a Postman Collection of requests will be added to this repo\n\n\nLogging\n\n\nCurrently, a single logger (\nozp-center\n) is used throughout the application.\nSee \nsettings.py\n for details\n\n\nStatic and Media Files\n\n\nStatic files: JS, CSS, fonts, etc. Media files: images uploaded during app\nusage. Good explanation \nhere\n\n\nStatic files include html/css/js for:\n * Django admin site\n * DRF Browsable API\n * Swagger docs\n\n\nMedia files (uploaded images) have associated access controls that require\nenforcement on a per-user basis. For that reason, media files are not served\nstatically as they typically are, but instead served by the wsgi app itself\n\n\nScripts\n\n\nThe \nrunscript\n command is installed via the django-extensions package and used\nto run scripts in the django context, just as you would get by running a set\nof commands in the shell using \npython manage.py shell\n. This can be used\nto run the script to populate the database with sample data:\n\npython manage.py runscript sample_data_generator\n. See the\n\ndocs\n for\ndetails\n\n\nAPI Input\n\n\nAll POST, PUT, and PATCH endpoints should use JSON encoded input as per\n\nthis\n\n\nDjango Admin Site\n\n\nThe admin site is currently enabled in development (but will likely be\ndisabled in production). It is accessible by both Apps Mall Stewards and\nOrg Stewards. It has a number of limitations, including the inability to upload\nimages (since images aren't stored in the database), and the fact that many\noperations (like editing reviews, approving listings, etc) should result in\nadditional operations (like creating ListingActivity entries), but using\nthe Admin interface directly bypasses that logic\n\n\nTracing REST Call\n\n\nThis section describes the life of a REST call.\nDeveloper should have knownledge of\n\n \nDjango's URL Dispatcher\n\n\n \nDjango Rest Framework's Viewsets\n\n* \nDjango Rest Framework's Serializer\n\n\nExample trace for a GET Request for getting a user's profile for an authenticated user\n\nGET /api/self/profile\n\n\n Entry Point for all REST Calls - ozp/urls.py. All /api/\n calls get re-routed to ozpcenter/urls.py file\n\n ozpcenter/urls.py add REST access points for all the views for the resources (agency, category, etc...)\n  * This line of code \nurl(r'', include('ozpcenter.api.profile.urls'))\n adds endpoints related to profile REST Calls\n\n ozpcenter/api/profile/user.py - 'self/profile/' route points to current user's profile (Using CurrentUserViewSet in ozpcenter/api/profile/views.py)\n* ozpcenter/api/profile/views.py - For GET Request for this route it will call the 'retrieve' method\n  * Before allowing user to access the endpoint it will make sure user is authenticated and has the correct role using 'permission_classes = (permissions.IsUser,)'\n\n\nControlling Access\n\n\nAnonymous users have no access - all must have a valid username/password (dev)\nor valid certificate (production) to be granted any access\n\n\nA few endpoints only provide READ access:\n\n\n\n\nstorefront\n\n\nmetadata\n\n\n\n\nSeveral resources allow global READ access with WRITE access restricted to\nApps Mall Stewards:\n\n\n\n\naccess_control\n\n\nagency\n\n\ncategory\n\n\ncontact_type\n\n\nlisting_type\n\n\n\n\nimage\n\n\n\n\nglobal READ of metadata, but access_control enforcement on the images\nthemselves\n\n\nWRITE access allowed for all users, but the associated access_control level\n    cannot exceed that of the current user\n\n\n\n\nintent\n\n\n\n\nglobal READ and WRITE allowed, but associated intent.icon.access_control\n    cannot exceed that of the current user\n\n\n\n\nlibrary\n\n\n\n\nREAD access for ORG stewards and above\n\n\nno WRITE access\n\n\nREAD and WRITE access to /self/library for the current user\n\n\n\n\nnotification\n\n\n\n\nglobal READ access\n\n\nWRITE access restricted to Org Stewards and above, unless the notification\n    is associated with a Listing owned by this user\n\n\nREAD and WRITE access to /self/notification for the current user\n\n\n\n\nprofile\n\n\n\n\nREAD access restricted to Org Stewards and above\n\n\nWRITE access restricted to the associated user (users cannot create, modify,\n    or delete users other than themselves)\n\n\nREAD and WRITE access to /self/profile for the current user\n\n\n\n\nlisting\n\n\n\n\nREAD access restricted by agency (if listing is private) and by access_control\n    level\n\n\nWRITE access:\n\n\nglobal WRITE access to create/modify/delete a listing in the draft or\n    pending state ONLY\n\n\nOrg Stewards and above can change the state to published/approved or\n    rejected, and change state to enabled/disabled, but must respect\n    Organization (an Org Steward cannot modify\n    a listing for which they are not the owner and/or not a member of\n    the listing's agency)\n\n\nglobal WRITE access to create/modify/delete reviews (item_comment) for\n    any listing (must respect organization (if private) and access_control)\n\n\n\n\n\n\nREAD access to /self/listing to return listings that current user owns (?)\n\n\n\n\nPermission Types\n\n\n\n\n\n\n\n\nPermission Types\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nread\n\n\nThe Read permission refers to a user's capability to read the contents of the endpoint.\n\n\n\n\n\n\nwrite\n\n\nThe Write permission refers to a user's capability to write contents to the endpoint.\n\n\n\n\n\n\naccess_control enforcement flag\n\n\naccess_control level cannot exceed that of the current user\n\n\n\n\n\n\n\n\nAccess Control Matrix\n\n\n\n    \n\n        \nozp-center\n\n        \nAccess Control\n\n    \n\n\ntr\n\n    \nth\nEndpoint\n/th\n\n    \nth\nAnonymous Users\n/th\n\n    \nth\nSelf\n/th\n\n    \nth\nOther\n/th\n\n    \nth\nOrg Steward\n/th\n\n    \nth\nApps Mall Steward \n/th\n\n    \nth\nNotes\n/th\n\n\n/tr\n\n\n\ntr\n\n    \ntd\naccess_control (?)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nagency\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\ncategory\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\ncontact_type\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nimage (metadata)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nRead: access_control enforcement on the images themselves, Write: associated access_control level cannot exceed that of the current user\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nintent\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nassociated intent.icon.access_control cannot exceed that of the current user\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nlibrary\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nlibrary (self)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nlisting\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr-a\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nlisting (self)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nlisting_type (?)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nnotification\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nprofile\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\nusers cannot create, modify, or delete users other than themselves\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nprofile (self route)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nSelf\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nstorefront\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nR--\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nGet Storefront for current user\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nmetadata\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nR--\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nGet metadata for current user\n/td\n\n\n/tr\n\n\n\n\n\n\n\nSample Users for BasicAuth\n\n\nBy default, HTTP Basic Authentication is used for login. This can be changed\nto PKI (client certificates) by changing \nREST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES\n in \nsettings.py\n\n\nBelow are usernames that are part of our sample data (defined in\n\nozp-backend/ozpcenter/scripts/sample_data_generator.py\n) (password for all users is \npassword\n):\n\n\nAdmins:\n\n- bigbrother (minipax)\n- bigbrother2 (minitrue)\n- khaleesi (miniplen)\n\n\nOrg Stewards:\n\n- wsmith (minitrue, stewarded_orgs: minitrue)\n- julia (minitrue, stewarded_orgs: minitrue, miniluv)\n- obrien (minipax, stewarded_orgs: minipax, miniplenty)\n\n\nUsers:\n\n- aaronson (miniluv)\n- hodor (miniluv - PKI)\n- jones (minitrue)\n- tammy (minitrue - PKI)\n- rutherford (miniplenty)\n- noah (miniplenty - PKI)\n- syme (minipax)\n- abe (minipax - PKI)\n- tparsons (minipax, miniluv)\n- jsnow (minipax, miniluv - PKI)\n- charrington (minipax, miniluv, minitrue)\n- johnson (minipax, miniluv, minitrue - PKI)\n\n\nDomain Knowledge\n\n\nThe life of a submitted listing\n\n\nDescription on how listings get submitted. API endpoint: \n/api/listing\n\n\n User: A User submits a listing\n  * State\n    * User: Submitted Listing\n    * Org Steward: Needs Action (Approve Listing or return listing to user)\n    * Admin: Pending\n\n Org Steward: An Org Steward will approve user's listing or return back to the user with a comment)\n  * State: If Approved\n    * User: Pending\n    * Org Steward: Org Approved\n    * Admin: Needs Action\n  * State: If Returned to the user\n    * User: Needs Action\n    * Org Steward: Returned\n    * Admin: Returned\n* Admin: An admin will approve or reject listing for a org\n  * State: If approved the listing will be published\n    * User: Done\n    * Org Steward: Org Approved\n    * Admin: Admin Approved (Listing Published)\n  * State: If rejected\n    * User: Needs Action\n    * Org Steward: Returned\n    * Admin: Returned\n\n\n                           Submitted\n +--------+                Listing     +---------------------+\n |  USER  +-------------------------\n  |  ORG STEWARD/ADMIN  |\n +---+----+                            +---+----+------------+\n     ^           Rejected Listing          |    |\n     +---------------------+---------------+    |\n                           ^                    |\n                           |          Approved  |\n                Approved   |          Listing   |\n+-----------+   Listing   ++-------+            |\n|Published  | \n-----------+  ADMIN | \n----------+\n+-----------+             +--------+",
            "title": "Home"
        },
        {
            "location": "/#ozp-backend",
            "text": "Django-based backend API for the OZONE Platform (OZP). For those who just want\nto get OZP (Center, HUD, Webtop, IWC) up and running, see the quickstart  of the  ozp-ansible  project.",
            "title": "ozp-backend"
        },
        {
            "location": "/#background",
            "text": "ozp-backend replaces  ozp-rest \nas the backend for Center, HUD, Webtop, and IWC. Notable differences include:  Python vs. Java/Groovy  Django, Django Rest Framework vs. Grails, JAX-RS\n* Postgres vs. MySQL",
            "title": "Background"
        },
        {
            "location": "/#3rd-party-services",
            "text": "Travis-CI",
            "title": "3rd Party Services"
        },
        {
            "location": "/#getting-started",
            "text": "The recommended approach is to use the vagrant box referenced at the beginning\nof this README, which will create a production-esque deployment of OZP:   Postgres (vs. SQLite)  PKI (vs. HTTP Basic Auth)  Use of external authorization service  Enable HTTPS (via nginx reverse proxy)  Served via Gunicorn (vs. Django development server)   To serve the application on your host machine with minimal external dependencies,\ndo the following:   Remove psycopg2 from requirements.txt (so that Postgres won't be required)  Enable HTTP Basic Auth and disable PKI authentication. In settings.py, REST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES  should be set to 'rest_framework.authentication.BasicAuthentication'  Disable the authorization service. In settings.py, set  OZP.USE_AUTH_SERVER \nto  False  In settings.py, set  OZP.DEMO_APP_ROOT  to  localhost:8000  (or wherever\nthe django app will be served at)   Then, do the following:   Install Python 3.4.3. Python can be installed by downloading the appropriate\n    files  here . Note\n    that Python 3.4 includes both  pip  and  venv , a built-in replacement\n    for the  virtualenv  package  Create a new python environment using python 3.4.x. First, create a new\n    directory where this environment will live, for example, in\n     ~/python_envs/ozp . Now create a new environment there:\n     python3.4 -m venv ENV  (where  ENV  is the path you used above)  Active the new environment:  source ENV/bin/activate  Install the necessary dependencies into this python environment:\n     pip install -r requirements.txt  Run the server:  make dev   Swagger documentation for the api is available at  http://localhost:8000/docs/ \nUse username  wsmith  password  password  when prompted for authentication info  There's also the admin interface at  http://localhost:8000/admin \n(username:  wsmith , password:  password )",
            "title": "Getting Started"
        },
        {
            "location": "/#runing-elasticsearch-for-search",
            "text": "ozp/Settings.py file variable needs to be updated   \nES_ENABLED = True   \nAfter installing Elasticsearch run  make reindex_es  in the ozp-backend folder while inside of your $env       Installing and Running Elasticsearch     \nElasticsearch 2.4.1 needs to be installed and run\nhttps://www.elastic.co/guide/en/elasticsearch/guide/current/running-elasticsearch.html  The only requirement for installing Elasticsearch is a recent version of Java. Preferably, you should install the latest version of the official Java from www.java.com.      You can get the Elasticsearch 2.4.1 from https://www.elastic.co/blog/elasticsearch-2-4-1-released.   \nTo install Elasticsearch, download and extract the archive file for your platform. For more information, see the Installation topic in the Elasticsearch Reference.  Tip    \nWhen installing Elasticsearch in production, you can choose to use the Debian or RPM packages provided on the downloads page. You can also use the officially supported Puppet module or Chef cookbook.   \nOnce you\u2019ve extracted the archive file, Elasticsearch is ready to run. To start it up in the foreground:   \ncd elasticsearch   \n./bin/elasticsearch",
            "title": "Runing Elasticsearch for Search"
        },
        {
            "location": "/#releasing",
            "text": "Run  python release.py  to generate a tarball with Wheels for the application\nand all of its dependencies. See  release.py  for details",
            "title": "Releasing"
        },
        {
            "location": "/#for-developers",
            "text": "Understanding this project requires knowing a small-medium amount of Django and\na large amount of Django Rest Framework (DRF). From Django itself:  Object-relational mapper (ORM)  Authentication   manage.py  utility (testing, database migration)  Logging\n* Settings  Most of the URLs and Views are done with DRF, and very little is done with\ntemplating, forms, and the admin site",
            "title": "For Developers"
        },
        {
            "location": "/#plugins",
            "text": "TODO Add documentation  How does it work  How do make a new plugin",
            "title": "Plugins"
        },
        {
            "location": "/#pep8",
            "text": "Pep8 is the Style Guide for Python Code  pep8 ozp ozpcenter ozpiwc plugins plugins_util --ignore=E501,E123,E128,E121,E124,E711,E402 --exclude=ozpcenter/scripts/* --show-source\nautopep8 . -r --diff --ignore errors=E501,E123,E128,E121,E124  --max-line-length=5000",
            "title": "Pep8"
        },
        {
            "location": "/#serializers",
            "text": "Serialization = Python obj -  JSON  Deserialization = JSON -  Python obj  DRF does not have a built-in, defacto way of specifying different serializers\nfor handling input on a request vs output on a Response. Sometimes this is\nacceptable, but often times the two structures are not the same. For instance,\nsome fields may be auto-generated on the server when a  POST  is made (so they\nshouldn't be part of the  POST  Request data that will be deserialized), but a GET  request should return a Response that includes this information. For\nsimple cases like this, Serializer fields can be marked as  read_only  or write_only  ( read_only  fields will not become part of the serializer's validated_data ). If more control than this is needed (e.g. very different input\nand output formats), the  get_serializer_class()  method can be overridden\nin the View and selected dynamically based on request.method ( POST ,  GET ,\netc).  For details regarding input vs output serializers:  https://github.com/tomchristie/django-rest-framework/issues/1563  http://stackoverflow.com/questions/17551380/python-rest-framwork-different-serializers-for-input-and-output-of-service  Sometimes it might not be clear where the Serializer classes should live for\nnested objects. For example, the listing resource needs to serialize the nested\nAgency model - should that Agency serializer live in the listing resource\npackage or in the agency package? Generally speaking, if the serializer is\nvery generic, it should live in its respective resource package. If instead\nit's highly customized (and thus unlikely to be used by other resources), it\nshould live with its nested resource.  One annoyance with nested serializers is that, if doing a create/POST, DRF\nassumes that each nested resource should also be created. This causes validation\nerrors to be raised when doing things like creating a new listing with an\nexisting category, listing type, etc. The way around that problem is to\nexplicitly remove all validation on any nested serializer fields that have\nunique constraints. For example, for a serializer with a  title  field:  extra_kwargs = {\n    'title': {'validators': []}\n}  Because we don't want to remove the validator for the base resource (only when\nit's used in a nested fashion), some of the more complicated resources (namely\nListing) have lots of nested serializers that are identical to their non-nested\ncounterparts save for the removal of the unique field validators",
            "title": "Serializers"
        },
        {
            "location": "/#model-access-and-caching",
            "text": "model_access.py  files should be used to encapsulate more complex database\nqueries and business logic (as opposed to placing it in Views and Serializers).\nThese methods are easier to use in sample data generators, easier to test,\nand allows the complexity of Django Rest Framework to stay largely separate\nfrom the core application logic  Memcache is not currently used, but this is also the layer to implement\nobject/query caching, such as:  data = cache.get('stuff')\nif data is None:\n    data = list(Stuff.objects.all())\n    cache.set('stuff', data)\nreturn data  Note that we also need logic to invalidate specific caches when resources are\nmodified. For example, if a Listing is updated, all cached items referring/using\nthat listing's data should be invalidated. By far and large, this logic is not\nyet in place, so enabling the cache will likely lead to unexpected results.\nIn addition, the requirement to support 'tailored views' reduces the value\nof caching, since most queries must be filtered against a user's particular\naccess controls",
            "title": "Model Access and Caching"
        },
        {
            "location": "/#models",
            "text": "Regarding  __str__() :\nIt\u2019s important to add  __str__()  methods to your models, not only for your own\nconvenience when dealing with the interactive prompt, but also because objects\u2019\nrepresentations are used throughout Django\u2019s automatically-generated admin.\nNote that on Python 2,  __unicode__()  should be defined instead.  By default, fields cannot be null or blank  Some of the access control logic necessary to support tailored views lives\nin  models.py  as custom  models.Manager  classes (Reviews, Listings,\nListingActivities, and Images)",
            "title": "Models"
        },
        {
            "location": "/#views",
            "text": "We generally prefer to\nuse class-based views and  ViewSet s ( ModelViewSet s in particular) just\nbecause it's less code (assuming you don't require a significant amount of\ncustomization)  The use of the convenience method  get_object_or_404  breaks the encapsulation\nof database queries in the  model_access  files (and prevents caching). That\nmight be something to look at later on.",
            "title": "Views"
        },
        {
            "location": "/#urls",
            "text": "All resource endpoints are defined in the resource's respective  urls.py  in ozpcenter/api/ .  ozpcenter.urls  collects all of these endpoints, where they\nare given the  api/  prefix in the global  urls.py  DRF uses a browsable API, meaning that you can go to localhost:8000/api/metadata/  (for instance) in your browser. In general, the\nSwagger documentation is the recommended way to view and interact with the API.  All URLs are currently set to use a trailing  /",
            "title": "URLs"
        },
        {
            "location": "/#authentication-and-authorization",
            "text": "",
            "title": "Authentication and Authorization"
        },
        {
            "location": "/#overview",
            "text": "Authentication and authorization is based on the default  django.contrib.auth \nsystem built into Django, with numerous customizations.  The default User model is extended by giving the  Profile  model a one-to-one\nrelationship with the  django.contrib.auth.models.User  model, as described here  The default  User \nmodel has the following fields:   username  first_name  last_name  email  password  groups (many-to-many relationship to Group)  user_permissions (many-to-many relationship to Permission)  is_staff (Boolean. Designates whether this user can access the admin site)  is_active (Boolean. Designates whether this user account should be considered\n    active)  is_superuser (Boolean. Designates that this user has all permissions without\n    explicitly assigning them)  last_login (a datetime of the user's last login)  date_joined (a datetime designating when the account was created)   Of these fields:   first_name and last_name are not used  is_superuser is always set to False  is_staff is set to True for Org Stewards and Apps Mall Stewards  password is only used in development. On production, client SSL certs are\n    used, and so password is set to XXXXXXXX   Groups  are\nused to categorize users as Users, Org Stewards, Apps Mall Stewards, etc. These\ngroups are used to partially control access to various resources (for example,\nUsers cannot make modifications to the Categories). That said, the majority\nof 'access control' cannot be accomplished by creating generic permissions\nand groups. For example, an Org Steward should be able to approve a Listing only\nfor organizations to which they belong. Furthermore, any resources (Listings,\nImages) that have a specific access_control associated with them must be\nhidden from users (regardless of role/group) without the appropriate level\nof access.  Django Permissions are used to control access to the Admin site. By default,\nadd, change, and delete permissions are added to each model in the application.\nThe notion of separate permissions for these three operations don't make much\nsense for this application - for now, the default permissions will be left\nalone, but the Permissions infrastructure won't be used much beyond that. As\npreviously stated, it is not possible to create generic permissions that can\nbe statically assigned to users, like 'can_approve_listing', since the\nallowance of such an action depends on the object (model instance), not just the\nmodel type. Therefore, custom object-level permissions will typically be used\nto control access to specific resource instances (for both read and write\noperations). For list queries where multiple resources are returned, these\nobject-level permission checks are not used. Instead, filters and custom\nquerysets are used to ensure only the appropriate data is returned.",
            "title": "Overview"
        },
        {
            "location": "/#authentication",
            "text": "The app currently supports two forms of authentication - HTTP Basic Auth and\nPKI (client SSL authentication). HTTP Basic Auth is used for development\npurposes only. PKI authentication is implemented in  ozpcenter/auth/pkiauth.py .\nThe method of authentication to use is controlled by REST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES  in settings.py",
            "title": "Authentication"
        },
        {
            "location": "/#tests",
            "text": "Generally speaking, each resource (listing, agency, profile, etc) may have\ntwo types of tests: business logic tests and API tests. The former typically\ntests code in  model_access.py  files, which is pure Python code and independent\nof Django or any \"web stuff\". The latter API tests, on the other hand, actually\nmake HTTP requests using special testing clients and factories, and are more\nlike end-to-end or integration tests",
            "title": "Tests"
        },
        {
            "location": "/#database",
            "text": "System uses Postgres in Production and Sqlite3 in Development",
            "title": "Database"
        },
        {
            "location": "/#api-documentation",
            "text": "There are a number of different documentation resources available, depending\non what you're looking for.  DRF's Web Browsable API can be accessed by entering an endpoint in the browser,\nfor example,  rootUrl /api/profile/ .  Limitations:\n * the API Root doesn't have a list of all endpoints, so you need to know\n what you're looking for\n * although these pages include forms that could potentially support POST\n requests, they don't work very well, making the browsable API mostly useless\n for non-GET requests  Swagger docs are created via Django REST Swagger and served at\n  rootUrl /docs/ . Swagger makes it easy to see all of the endpoints available.\n Unlike the Browsable API docs, Swagger supports POST, PUT, and DELETE for most\n of the endpoints as well. Limitations:\n  * POST api/image/ doesn't work from Swagger\n  * some of the more complicated endpoints (like POST api/listing/) might not\n  have forms that show all of the required and/or optional data that must or\n  could be included in the request  Postman was used extensively during the API's development, and perhaps someday\n a Postman Collection of requests will be added to this repo",
            "title": "API Documentation"
        },
        {
            "location": "/#logging",
            "text": "Currently, a single logger ( ozp-center ) is used throughout the application.\nSee  settings.py  for details",
            "title": "Logging"
        },
        {
            "location": "/#static-and-media-files",
            "text": "Static files: JS, CSS, fonts, etc. Media files: images uploaded during app\nusage. Good explanation  here  Static files include html/css/js for:\n * Django admin site\n * DRF Browsable API\n * Swagger docs  Media files (uploaded images) have associated access controls that require\nenforcement on a per-user basis. For that reason, media files are not served\nstatically as they typically are, but instead served by the wsgi app itself",
            "title": "Static and Media Files"
        },
        {
            "location": "/#scripts",
            "text": "The  runscript  command is installed via the django-extensions package and used\nto run scripts in the django context, just as you would get by running a set\nof commands in the shell using  python manage.py shell . This can be used\nto run the script to populate the database with sample data: python manage.py runscript sample_data_generator . See the docs  for\ndetails",
            "title": "Scripts"
        },
        {
            "location": "/#api-input",
            "text": "All POST, PUT, and PATCH endpoints should use JSON encoded input as per this",
            "title": "API Input"
        },
        {
            "location": "/#django-admin-site",
            "text": "The admin site is currently enabled in development (but will likely be\ndisabled in production). It is accessible by both Apps Mall Stewards and\nOrg Stewards. It has a number of limitations, including the inability to upload\nimages (since images aren't stored in the database), and the fact that many\noperations (like editing reviews, approving listings, etc) should result in\nadditional operations (like creating ListingActivity entries), but using\nthe Admin interface directly bypasses that logic",
            "title": "Django Admin Site"
        },
        {
            "location": "/#tracing-rest-call",
            "text": "This section describes the life of a REST call.\nDeveloper should have knownledge of   Django's URL Dispatcher    Django Rest Framework's Viewsets \n*  Django Rest Framework's Serializer  Example trace for a GET Request for getting a user's profile for an authenticated user GET /api/self/profile   Entry Point for all REST Calls - ozp/urls.py. All /api/  calls get re-routed to ozpcenter/urls.py file  ozpcenter/urls.py add REST access points for all the views for the resources (agency, category, etc...)\n  * This line of code  url(r'', include('ozpcenter.api.profile.urls'))  adds endpoints related to profile REST Calls  ozpcenter/api/profile/user.py - 'self/profile/' route points to current user's profile (Using CurrentUserViewSet in ozpcenter/api/profile/views.py)\n* ozpcenter/api/profile/views.py - For GET Request for this route it will call the 'retrieve' method\n  * Before allowing user to access the endpoint it will make sure user is authenticated and has the correct role using 'permission_classes = (permissions.IsUser,)'",
            "title": "Tracing REST Call"
        },
        {
            "location": "/#controlling-access",
            "text": "Anonymous users have no access - all must have a valid username/password (dev)\nor valid certificate (production) to be granted any access  A few endpoints only provide READ access:   storefront  metadata   Several resources allow global READ access with WRITE access restricted to\nApps Mall Stewards:   access_control  agency  category  contact_type  listing_type   image   global READ of metadata, but access_control enforcement on the images\nthemselves  WRITE access allowed for all users, but the associated access_control level\n    cannot exceed that of the current user   intent   global READ and WRITE allowed, but associated intent.icon.access_control\n    cannot exceed that of the current user   library   READ access for ORG stewards and above  no WRITE access  READ and WRITE access to /self/library for the current user   notification   global READ access  WRITE access restricted to Org Stewards and above, unless the notification\n    is associated with a Listing owned by this user  READ and WRITE access to /self/notification for the current user   profile   READ access restricted to Org Stewards and above  WRITE access restricted to the associated user (users cannot create, modify,\n    or delete users other than themselves)  READ and WRITE access to /self/profile for the current user   listing   READ access restricted by agency (if listing is private) and by access_control\n    level  WRITE access:  global WRITE access to create/modify/delete a listing in the draft or\n    pending state ONLY  Org Stewards and above can change the state to published/approved or\n    rejected, and change state to enabled/disabled, but must respect\n    Organization (an Org Steward cannot modify\n    a listing for which they are not the owner and/or not a member of\n    the listing's agency)  global WRITE access to create/modify/delete reviews (item_comment) for\n    any listing (must respect organization (if private) and access_control)    READ access to /self/listing to return listings that current user owns (?)   Permission Types     Permission Types  Description      read  The Read permission refers to a user's capability to read the contents of the endpoint.    write  The Write permission refers to a user's capability to write contents to the endpoint.    access_control enforcement flag  access_control level cannot exceed that of the current user     Access Control Matrix  \n     \n         ozp-center \n         Access Control \n      tr \n     th Endpoint /th \n     th Anonymous Users /th \n     th Self /th \n     th Other /th \n     th Org Steward /th \n     th Apps Mall Steward  /th \n     th Notes /th  /tr  tr \n     td access_control (?) /td \n     td --- /td \n     td r-- /td \n     td /td \n     td r-- /td \n     td rw- /td \n     td /td  /tr  tr \n     td agency /td \n     td --- /td \n     td r-- /td \n     td r-- /td \n     td r-- /td \n     td rw- /td \n     td /td  /tr  tr \n     td category /td \n     td --- /td \n     td r-- /td \n     td r-- /td \n     td r-- /td \n     td rw- /td \n     td /td  /tr  tr \n     td contact_type /td \n     td --- /td \n     td r-- /td \n     td r-- /td \n     td r-- /td \n     td rw- /td \n     td /td  /tr  tr \n     td image (metadata) /td \n     td --- /td \n     td rwa /td \n     td rwa /td \n     td rwa /td \n     td rwa /td \n     td Read: access_control enforcement on the images themselves, Write: associated access_control level cannot exceed that of the current user /td  /tr  tr \n     td intent /td \n     td --- /td \n     td rwa /td \n     td rwa /td \n     td rwa /td \n     td rwa /td \n     td associated intent.icon.access_control cannot exceed that of the current user /td  /tr  tr \n     td library /td \n     td --- /td \n     td r-- /td \n     td r-- /td \n     td r-- /td \n     td r-- /td \n     td /td  /tr  tr \n     td library (self) /td \n     td --- /td \n     td rw- /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td /td  /tr  tr \n     td listing /td \n     td --- /td \n     td r-a /td \n     td --- /td \n     td rw- /td \n     td rw- /td \n     td /td  /tr  tr \n     td listing (self) /td \n     td --- /td \n     td rw- /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td /td  /tr  tr \n     td listing_type (?) /td \n     td --- /td \n     td r-- /td \n     td --- /td \n     td r-- /td \n     td rw- /td \n     td /td  /tr  tr \n     td notification /td \n     td --- /td \n     td rw- /td \n     td r-- /td \n     td rw- /td \n     td rw- /td \n     td /td  /tr  tr \n     td profile /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td rw- /td \n     td rw- /td \n     td users cannot create, modify, or delete users other than themselves /td  /tr  tr \n     td profile (self route) /td \n     td --- /td \n     td rw- /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td Self /td  /tr  tr \n     td storefront /td \n     td --- /td \n     td R-- /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td Get Storefront for current user /td  /tr  tr \n     td metadata /td \n     td --- /td \n     td R-- /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td Get metadata for current user /td  /tr",
            "title": "Controlling Access"
        },
        {
            "location": "/#sample-users-for-basicauth",
            "text": "By default, HTTP Basic Authentication is used for login. This can be changed\nto PKI (client certificates) by changing  REST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES  in  settings.py  Below are usernames that are part of our sample data (defined in ozp-backend/ozpcenter/scripts/sample_data_generator.py ) (password for all users is  password ):  Admins: \n- bigbrother (minipax)\n- bigbrother2 (minitrue)\n- khaleesi (miniplen)  Org Stewards: \n- wsmith (minitrue, stewarded_orgs: minitrue)\n- julia (minitrue, stewarded_orgs: minitrue, miniluv)\n- obrien (minipax, stewarded_orgs: minipax, miniplenty)  Users: \n- aaronson (miniluv)\n- hodor (miniluv - PKI)\n- jones (minitrue)\n- tammy (minitrue - PKI)\n- rutherford (miniplenty)\n- noah (miniplenty - PKI)\n- syme (minipax)\n- abe (minipax - PKI)\n- tparsons (minipax, miniluv)\n- jsnow (minipax, miniluv - PKI)\n- charrington (minipax, miniluv, minitrue)\n- johnson (minipax, miniluv, minitrue - PKI)",
            "title": "Sample Users for BasicAuth"
        },
        {
            "location": "/#domain-knowledge",
            "text": "",
            "title": "Domain Knowledge"
        },
        {
            "location": "/#the-life-of-a-submitted-listing",
            "text": "Description on how listings get submitted. API endpoint:  /api/listing   User: A User submits a listing\n  * State\n    * User: Submitted Listing\n    * Org Steward: Needs Action (Approve Listing or return listing to user)\n    * Admin: Pending  Org Steward: An Org Steward will approve user's listing or return back to the user with a comment)\n  * State: If Approved\n    * User: Pending\n    * Org Steward: Org Approved\n    * Admin: Needs Action\n  * State: If Returned to the user\n    * User: Needs Action\n    * Org Steward: Returned\n    * Admin: Returned\n* Admin: An admin will approve or reject listing for a org\n  * State: If approved the listing will be published\n    * User: Done\n    * Org Steward: Org Approved\n    * Admin: Admin Approved (Listing Published)\n  * State: If rejected\n    * User: Needs Action\n    * Org Steward: Returned\n    * Admin: Returned                             Submitted\n +--------+                Listing     +---------------------+\n |  USER  +-------------------------   |  ORG STEWARD/ADMIN  |\n +---+----+                            +---+----+------------+\n     ^           Rejected Listing          |    |\n     +---------------------+---------------+    |\n                           ^                    |\n                           |          Approved  |\n                Approved   |          Listing   |\n+-----------+   Listing   ++-------+            |\n|Published  |  -----------+  ADMIN |  ----------+\n+-----------+             +--------+",
            "title": "The life of a submitted listing"
        },
        {
            "location": "/debugging/",
            "text": "Performance Debugging\n\n\nWe check the performance of a Database model using shell_plus command for manage.py.\n\n\npython manage.py shell_plus --print-sql\n\n\n\n\n# Shell Plus Model Imports\nfrom corsheaders.models import CorsModel\nfrom django.contrib.admin.models import LogEntry\nfrom django.contrib.auth.models import Group, Permission, User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.sessions.models import Session\nfrom ozpcenter.models import Agency, ApplicationLibraryEntry, Category, ChangeDetail, Contact, ContactType, DocUrl, Image, ImageType, Intent, Listing, ListingActivity, ListingType, Notification, Profile, Review, Screenshot, Tag\nfrom ozpiwc.models import DataResource\n# Shell Plus Django Imports\nfrom django.utils import timezone\nfrom django.conf import settings\nfrom django.core.cache import cache\nfrom django.core.urlresolvers import reverse\nfrom django.db.models import Avg, Count, F, Max, Min, Sum, Q, Prefetch\nfrom django.db import transaction\nPython 3.4.3 (default, Feb 25 2016, 10:08:19)\n[GCC 4.8.2] on linux\nType \nhelp\n, \ncopyright\n, \ncredits\n or \nlicense\n for more information.\n(InteractiveConsole)\n\n\n\n\n\n\nGetting all Profiles (without any optimizations)\n\n\n Profile.objects.all()\nQUERY = 'SELECT \nozpcenter_profile\n.\nid\n, \nozpcenter_profile\n.\ndisplay_name\n, \nozpcenter_profile\n.\nbio\n, \nozpcenter_profile\n.\ncenter_tour_flag\n, \nozpcenter_profile\n.\nhud_tour_flag\n, \nozpcenter_profile\n.\nwebtop_tour_flag\n, \nozpcenter_profile\n.\ndn\n, \nozpcenter_profile\n.\nissuer_dn\n, \nozpcenter_profile\n.\nauth_expires\n, \nozpcenter_profile\n.\naccess_control\n, \nozpcenter_profile\n.\nuser_id\n FROM \nozpcenter_profile\n LIMIT 21' - PARAMS = ()\n\nExecution time: 0.000324s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (1,)\n\nExecution time: 0.000207s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (2,)\n\nExecution time: 0.000203s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (3,)\n\nExecution time: 0.000202s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (4,)\n\nExecution time: 0.000124s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (5,)\n\nExecution time: 0.000101s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (6,)\n\nExecution time: 0.000145s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (7,)\n\nExecution time: 0.000145s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (8,)\n\nExecution time: 0.000131s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (9,)\n\nExecution time: 0.000099s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (10,)\n\nExecution time: 0.000098s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (11,)\n\nExecution time: 0.000096s [Database: default]\n\n[Profile: wsmith, Profile: julia, Profile: obrien, Profile: bigbrother, Profile: bigbrother2, Profile: aaronson, Profile: jones, Profile: rutherford, Profile: syme, Profile: tparsons, Profile: charrington]\n\n\n\n\n\nResults:\n12 database calls ( 1 + num of user = Database calls)\n\n\nGetting all Profiles (with join)\n\n\n Profile.objects.all().select_related('user')\nQUERY = 'SELECT \nozpcenter_profile\n.\nid\n, \nozpcenter_profile\n.\ndisplay_name\n, \nozpcenter_profile\n.\nbio\n, \nozpcenter_profile\n.\ncenter_tour_flag\n, \nozpcenter_profile\n.\nhud_tour_flag\n, \nozpcenter_profile\n.\nwebtop_tour_flag\n, \nozpcenter_profile\n.\ndn\n, \nozpcenter_profile\n.\nissuer_dn\n, \nozpcenter_profile\n.\nauth_expires\n, \nozpcenter_profile\n.\naccess_control\n, \nozpcenter_profile\n.\nuser_id\n, \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nozpcenter_profile\n LEFT OUTER JOIN \nauth_user\n ON ( \nozpcenter_profile\n.\nuser_id\n = \nauth_user\n.\nid\n ) LIMIT 21' - PARAMS = ()\n\nExecution time: 0.000472s [Database: default]\n\n[Profile: wsmith, Profile: julia, Profile: obrien, Profile: bigbrother, Profile: bigbrother2, Profile: aaronson, Profile: jones, Profile: rutherford, Profile: syme, Profile: tparsons, Profile: charrington]\n\n\n\n\nResults:\n1 database call\n\n\nDebugging Storefront Serializer\n\n\nfrom rest_framework.response import Response\nimport ozpcenter.api.storefront.model_access as ma\nimport ozpcenter.api.storefront.serializers as se\nimport timeit\nfrom django.test.client import RequestFactory\n\nrf = RequestFactory()\nget_request = rf.get('/hello/')\n\ndata = ma.get_storefront('bigbrother') # Database calls\nsea = se.StorefrontSerializer(data,context={'request':get_request})\nstart = timeit.timeit(); r= Response(sea.data) ; end = timeit.timeit() # Database calls\nprint('Time: %s' % end)",
            "title": "Debugging"
        },
        {
            "location": "/debugging/#performance-debugging",
            "text": "We check the performance of a Database model using shell_plus command for manage.py.  python manage.py shell_plus --print-sql  # Shell Plus Model Imports\nfrom corsheaders.models import CorsModel\nfrom django.contrib.admin.models import LogEntry\nfrom django.contrib.auth.models import Group, Permission, User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.sessions.models import Session\nfrom ozpcenter.models import Agency, ApplicationLibraryEntry, Category, ChangeDetail, Contact, ContactType, DocUrl, Image, ImageType, Intent, Listing, ListingActivity, ListingType, Notification, Profile, Review, Screenshot, Tag\nfrom ozpiwc.models import DataResource\n# Shell Plus Django Imports\nfrom django.utils import timezone\nfrom django.conf import settings\nfrom django.core.cache import cache\nfrom django.core.urlresolvers import reverse\nfrom django.db.models import Avg, Count, F, Max, Min, Sum, Q, Prefetch\nfrom django.db import transaction\nPython 3.4.3 (default, Feb 25 2016, 10:08:19)\n[GCC 4.8.2] on linux\nType  help ,  copyright ,  credits  or  license  for more information.\n(InteractiveConsole)",
            "title": "Performance Debugging"
        },
        {
            "location": "/debugging/#getting-all-profiles-without-any-optimizations",
            "text": "Profile.objects.all()\nQUERY = 'SELECT  ozpcenter_profile . id ,  ozpcenter_profile . display_name ,  ozpcenter_profile . bio ,  ozpcenter_profile . center_tour_flag ,  ozpcenter_profile . hud_tour_flag ,  ozpcenter_profile . webtop_tour_flag ,  ozpcenter_profile . dn ,  ozpcenter_profile . issuer_dn ,  ozpcenter_profile . auth_expires ,  ozpcenter_profile . access_control ,  ozpcenter_profile . user_id  FROM  ozpcenter_profile  LIMIT 21' - PARAMS = ()\n\nExecution time: 0.000324s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (1,)\n\nExecution time: 0.000207s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (2,)\n\nExecution time: 0.000203s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (3,)\n\nExecution time: 0.000202s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (4,)\n\nExecution time: 0.000124s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (5,)\n\nExecution time: 0.000101s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (6,)\n\nExecution time: 0.000145s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (7,)\n\nExecution time: 0.000145s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (8,)\n\nExecution time: 0.000131s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (9,)\n\nExecution time: 0.000099s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (10,)\n\nExecution time: 0.000098s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (11,)\n\nExecution time: 0.000096s [Database: default]\n\n[Profile: wsmith, Profile: julia, Profile: obrien, Profile: bigbrother, Profile: bigbrother2, Profile: aaronson, Profile: jones, Profile: rutherford, Profile: syme, Profile: tparsons, Profile: charrington]  Results:\n12 database calls ( 1 + num of user = Database calls)",
            "title": "Getting all Profiles (without any optimizations)"
        },
        {
            "location": "/debugging/#getting-all-profiles-with-join",
            "text": "Profile.objects.all().select_related('user')\nQUERY = 'SELECT  ozpcenter_profile . id ,  ozpcenter_profile . display_name ,  ozpcenter_profile . bio ,  ozpcenter_profile . center_tour_flag ,  ozpcenter_profile . hud_tour_flag ,  ozpcenter_profile . webtop_tour_flag ,  ozpcenter_profile . dn ,  ozpcenter_profile . issuer_dn ,  ozpcenter_profile . auth_expires ,  ozpcenter_profile . access_control ,  ozpcenter_profile . user_id ,  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  ozpcenter_profile  LEFT OUTER JOIN  auth_user  ON (  ozpcenter_profile . user_id  =  auth_user . id  ) LIMIT 21' - PARAMS = ()\n\nExecution time: 0.000472s [Database: default]\n\n[Profile: wsmith, Profile: julia, Profile: obrien, Profile: bigbrother, Profile: bigbrother2, Profile: aaronson, Profile: jones, Profile: rutherford, Profile: syme, Profile: tparsons, Profile: charrington]  Results:\n1 database call",
            "title": "Getting all Profiles (with join)"
        },
        {
            "location": "/debugging/#debugging-storefront-serializer",
            "text": "from rest_framework.response import Response\nimport ozpcenter.api.storefront.model_access as ma\nimport ozpcenter.api.storefront.serializers as se\nimport timeit\nfrom django.test.client import RequestFactory\n\nrf = RequestFactory()\nget_request = rf.get('/hello/')\n\ndata = ma.get_storefront('bigbrother') # Database calls\nsea = se.StorefrontSerializer(data,context={'request':get_request})\nstart = timeit.timeit(); r= Response(sea.data) ; end = timeit.timeit() # Database calls\nprint('Time: %s' % end)",
            "title": "Debugging Storefront Serializer"
        }
    ]
}